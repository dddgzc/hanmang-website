// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7jQgmBmKYyCbHXSekk2FRy
// Component: ZF4Tnw-zFby
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantskJp4EfKscK4Tw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kJp4efKscK4Tw/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_寒芒.module.css"; // plasmic-import: 7jQgmBmKYyCbHXSekk2FRy/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: ZF4Tnw-zFby/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: m4ZNl1ar9h/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: nh6ZMjyETY/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: J8txRBXbTp/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  logoText?: p.Flex<"div">;
  title7?: p.Flex<"div">;
  title14?: p.Flex<"div">;
  title16?: p.Flex<"div">;
  title17?: p.Flex<"div">;
  title18?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultFooterProps {
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskJp4EfKscK4Tw()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__krAYa)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w4Vd)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aqtdz)}
              >
                <div
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames(projectcss.all, sty.logo)}
                />

                {true ? (
                  <div
                    data-plasmic-name={"logoText"}
                    data-plasmic-override={overrides.logoText}
                    className={classNames(projectcss.all, sty.logoText)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ni0Wf
                      )}
                    >
                      {"寒芒科技"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nVuKh
                      )}
                    >
                      {"HanMang Technology"}
                    </div>
                  </div>
                ) : null}
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__oni3R)}
            >
              <div
                data-plasmic-name={"title7"}
                data-plasmic-override={overrides.title7}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.title7
                )}
              >
                {"蜀 ICP 备 2022018241 号"}
              </div>

              <div
                data-plasmic-name={"title14"}
                data-plasmic-override={overrides.title14}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.title14
                )}
              >
                {"Copyright © 成都寒芒科技有限公司"}
              </div>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column__yqHmT)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__p4LpR)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hIoyk)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bjNom
                )}
              >
                {"联系我们"}
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__dKxM1)}
              >
                <Icon5Icon
                  className={classNames(projectcss.all, sty.svg__huCiw)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"title16"}
                  data-plasmic-override={overrides.title16}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.title16
                  )}
                >
                  {"18584866139"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fnV9R)}
              >
                <Icon6Icon
                  className={classNames(projectcss.all, sty.svg__sodUx)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"title17"}
                  data-plasmic-override={overrides.title17}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.title17
                  )}
                >
                  {"Ray0214"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__uzBEs)}
              >
                <Icon7Icon
                  className={classNames(projectcss.all, sty.svg__ebYwT)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"title18"}
                  data-plasmic-override={overrides.title18}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.title18
                  )}
                >
                  {"zhouyuan19950214@163.com"}
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column__tj1E)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ocBnH)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6IEjX)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2NyUq
                )}
              >
                {"扫码添加微信"}
              </div>

              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"140px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"140px" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/寒芒/images/qrCode.svg",
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />
            </p.Stack>
          </p.Stack>
        </div>

        <div className={classNames(projectcss.all, sty.column___84Kak)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__clM)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kg4VY
              )}
            >
              {"项目"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___4UqbM
              )}
              component={Link}
              href={"/ZhongYan" as const}
              platform={"nextjs"}
            >
              {"中烟公司自动化烤烟分级解决方案"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ibLlN
              )}
              component={Link}
              href={"/WeChat food" as const}
              platform={"nextjs"}
            >
              {"餐饮端微信小程序SaaS服务云平台"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__saFzf
              )}
              component={Link}
              href={"/Skyworth analysis" as const}
              platform={"nextjs"}
            >
              {"创维集团自动化营收预测分析平台"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ccObg
              )}
              component={Link}
              href={"/Skyworth monitoring" as const}
              platform={"nextjs"}
            >
              {"创维集团营收监控数字大屏"}
            </p.PlasmicLink>
          </p.Stack>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "logo",
    "logoText",
    "title7",
    "title14",
    "title16",
    "title17",
    "title18",
    "img"
  ],
  columns: [
    "columns",
    "logo",
    "logoText",
    "title7",
    "title14",
    "title16",
    "title17",
    "title18",
    "img"
  ],
  logo: ["logo"],
  logoText: ["logoText"],
  title7: ["title7"],
  title14: ["title14"],
  title16: ["title16"],
  title17: ["title17"],
  title18: ["title18"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  logo: "div";
  logoText: "div";
  title7: "div";
  title14: "div";
  title16: "div";
  title17: "div";
  title18: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    logo: makeNodeComponent("logo"),
    logoText: makeNodeComponent("logoText"),
    title7: makeNodeComponent("title7"),
    title14: makeNodeComponent("title14"),
    title16: makeNodeComponent("title16"),
    title17: makeNodeComponent("title17"),
    title18: makeNodeComponent("title18"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
