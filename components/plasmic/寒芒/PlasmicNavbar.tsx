// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7jQgmBmKYyCbHXSekk2FRy
// Component: VsZwhoWu74
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_寒芒.module.css"; // plasmic-import: 7jQgmBmKYyCbHXSekk2FRy/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: VsZwhoWu74/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: 87is_TTnv/icon

export type PlasmicNavbar__VariantMembers = {
  iconBase: "iconBase";
};

export type PlasmicNavbar__VariantsArgs = {
  iconBase?: SingleBooleanChoiceArg<"iconBase">;
};

type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>(
  "iconBase"
);

export type PlasmicNavbar__ArgsType = {
  text?: React.ReactNode;
  icon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>("text", "icon");

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNavbarProps {
  text?: React.ReactNode;
  icon?: React.ReactNode;
  iconBase?: SingleBooleanChoiceArg<"iconBase">;
  className?: string;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    true ? (
      <p.Stack
        as={p.PlasmicLink}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.a,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
        component={Link}
        platform={"nextjs"}
      >
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__shDnm, {
              [sty.freeBoxiconBase__shDnm03Hcb]: hasVariant(
                variants,
                "iconBase",
                "iconBase"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "首页",
              value: args.text,
              className: classNames(sty.slotTargetText)
            })}

            {(hasVariant(variants, "iconBase", "iconBase") ? true : false)
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <Icon8Icon
                      className={classNames(projectcss.all, sty.svg__s7X1Z)}
                      role={"img"}
                    />
                  ),

                  value: args.icon,
                  className: classNames(sty.slotTargetIcon, {
                    [sty.slotTargetIconiconBase]: hasVariant(
                      variants,
                      "iconBase",
                      "iconBase"
                    )
                  })
                })
              : null}
          </div>
        ) : null}

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xRshr)}
          >
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ct8V
              )}
              component={Link}
              href={"/ZhongYan" as const}
              platform={"nextjs"}
            >
              {"中烟公司自动化烤烟分级解决方案"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___87GS2
              )}
              component={Link}
              href={"/WeChat food" as const}
              platform={"nextjs"}
            >
              {"餐饮端微信小程序SaaS服务云平台"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___0MbpK
              )}
              component={Link}
              href={"/Skyworth analysis" as const}
              platform={"nextjs"}
            >
              {"创维集团自动化营收预测分析平台"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dTyi
              )}
              component={Link}
              href={"/Skyworth monitoring" as const}
              platform={"nextjs"}
            >
              {"创维集团营收监控数字化大屏"}
            </p.PlasmicLink>
          </p.Stack>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
