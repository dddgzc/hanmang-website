// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7jQgmBmKYyCbHXSekk2FRy
// Component: TiTpIxcJC6eJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: VsZwhoWu74/component
import Select from "../../Select"; // plasmic-import: XB1ngE7srsy/component
import Select__Option from "../../Select__Option"; // plasmic-import: h-AxygL4tTv/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Footer from "../../Footer"; // plasmic-import: ZF4Tnw-zFby/component

import { useScreenVariants as useScreenVariantskJp4EfKscK4Tw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kJp4efKscK4Tw/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_寒芒.module.css"; // plasmic-import: 7jQgmBmKYyCbHXSekk2FRy/projectcss
import sty from "./Plasmic成都寒芒科技有限公司.module.css"; // plasmic-import: TiTpIxcJC6eJ/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: 87is_TTnv/icon
import SystemarrowRightSLineIcon from "./icons/PlasmicIcon__SystemarrowRightSLine"; // plasmic-import: PBw4XRBD-6Y/icon
import BuildinggovernmentFillIcon from "./icons/PlasmicIcon__BuildinggovernmentFill"; // plasmic-import: KRKVYPvTEXA/icon
import Businessbriefcase4FillIcon from "./icons/PlasmicIcon__Businessbriefcase4Fill"; // plasmic-import: cnjp3EHweVg/icon
import Buildingbuilding3FillIcon from "./icons/PlasmicIcon__Buildingbuilding3Fill"; // plasmic-import: mmCKyJf2-g2/icon

export type Plasmic成都寒芒科技有限公司__VariantMembers = {};

export type Plasmic成都寒芒科技有限公司__VariantsArgs = {};
type VariantPropType = keyof Plasmic成都寒芒科技有限公司__VariantsArgs;
export const Plasmic成都寒芒科技有限公司__VariantProps =
  new Array<VariantPropType>();

export type Plasmic成都寒芒科技有限公司__ArgsType = {};
type ArgPropType = keyof Plasmic成都寒芒科技有限公司__ArgsType;
export const Plasmic成都寒芒科技有限公司__ArgProps = new Array<ArgPropType>();

export type Plasmic成都寒芒科技有限公司__OverridesType = {
  root?: p.Flex<"div">;
  content5?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  寒芒Logo?: p.Flex<"div">;
  logo2?: p.Flex<"div">;
  logoText?: p.Flex<"div">;
  icon3?: p.Flex<"svg">;
  icon2?: p.Flex<"svg">;
  select?: p.Flex<typeof Select>;
  icon4?: p.Flex<"svg">;
  公司描述?: p.Flex<"div">;
  标语?: p.Flex<"div">;
  球?: p.Flex<"div">;
  文字?: p.Flex<"div">;
  擅长?: p.Flex<"div">;
  切换?: p.Flex<"div">;
  text5?: p.Flex<"div">;
  切换2?: p.Flex<"div">;
  text6?: p.Flex<"div">;
  切换3?: p.Flex<"div">;
  text7?: p.Flex<"div">;
  擅长2?: p.Flex<"div">;
  切换4?: p.Flex<"div">;
  text8?: p.Flex<"div">;
  切换5?: p.Flex<"div">;
  text9?: p.Flex<"div">;
  切换6?: p.Flex<"div">;
  text10?: p.Flex<"div">;
  button?: p.Flex<"div">;
  图片?: p.Flex<"div">;
  公司介绍?: p.Flex<"div">;
  hand?: p.Flex<"div">;
  right?: p.Flex<"div">;
  title?: p.Flex<"div">;
  文字2?: p.Flex<"div">;
  业务领域?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  content?: p.Flex<"div">;
  文字3?: p.Flex<"div">;
  image15?: p.Flex<"div">;
  title3?: p.Flex<"div">;
  text11?: p.Flex<"div">;
  文字4?: p.Flex<"div">;
  image12?: p.Flex<"div">;
  title4?: p.Flex<"div">;
  text12?: p.Flex<"div">;
  文字5?: p.Flex<"div">;
  image14?: p.Flex<"div">;
  title5?: p.Flex<"div">;
  text13?: p.Flex<"div">;
  客户案例?: p.Flex<"div">;
  title6?: p.Flex<"div">;
  content2?: p.Flex<"div">;
  客户案例3?: p.Flex<"div">;
  rectangle2?: p.Flex<"a"> & Partial<LinkProps>;
  title8?: p.Flex<"a"> & Partial<LinkProps>;
  tag2?: p.Flex<"div">;
  工业化机器视觉领域?: p.Flex<"div">;
  客户案例6?: p.Flex<"div">;
  rectangle5?: p.Flex<"a"> & Partial<LinkProps>;
  title13?: p.Flex<"a"> & Partial<LinkProps>;
  tag5?: p.Flex<"div">;
  工业化机器视觉领域4?: p.Flex<"div">;
  客户案例4?: p.Flex<"div">;
  rectangle3?: p.Flex<"a"> & Partial<LinkProps>;
  title9?: p.Flex<"a"> & Partial<LinkProps>;
  tag3?: p.Flex<"div">;
  工业化机器视觉领域2?: p.Flex<"div">;
  客户案例5?: p.Flex<"div">;
  rectangle4?: p.Flex<"a"> & Partial<LinkProps>;
  title10?: p.Flex<"a"> & Partial<LinkProps>;
  tag4?: p.Flex<"div">;
  工业化机器视觉领域3?: p.Flex<"div">;
  人员占比?: p.Flex<"div">;
  content3?: p.Flex<"div">;
  brand2?: p.Flex<"div">;
  文字6?: p.Flex<"div">;
  擅长技术栈?: p.Flex<"div">;
  title11?: p.Flex<"div">;
  技术栈9?: p.Flex<"div">;
  image2?: p.Flex<"div">;
  text22?: p.Flex<"div">;
  技术栈10?: p.Flex<"div">;
  image8?: p.Flex<"div">;
  text23?: p.Flex<"div">;
  技术栈11?: p.Flex<"div">;
  image18?: p.Flex<"div">;
  text24?: p.Flex<"div">;
  技术栈12?: p.Flex<"div">;
  image19?: p.Flex<"div">;
  text25?: p.Flex<"div">;
  技术栈13?: p.Flex<"div">;
  image20?: p.Flex<"div">;
  text26?: p.Flex<"div">;
  技术栈14?: p.Flex<"div">;
  image21?: p.Flex<"div">;
  text27?: p.Flex<"div">;
  技术栈15?: p.Flex<"div">;
  image22?: p.Flex<"div">;
  text28?: p.Flex<"div">;
  技术栈16?: p.Flex<"div">;
  image23?: p.Flex<"div">;
  text29?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface Default成都寒芒科技有限公司Props {}

function Plasmic成都寒芒科技有限公司__RenderFunc(props: {
  variants: Plasmic成都寒芒科技有限公司__VariantsArgs;
  args: Plasmic成都寒芒科技有限公司__ArgsType;
  overrides: Plasmic成都寒芒科技有限公司__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskJp4EfKscK4Tw()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"成都寒芒科技有限公司"}</title>

        <meta
          key="og:title"
          property="og:title"
          content={"成都寒芒科技有限公司"}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"成都寒芒科技有限公司"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"content5"}
            data-plasmic-override={overrides.content5}
            className={classNames(projectcss.all, sty.content5)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bc4Sb)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                hasGap={true}
                className={classNames(projectcss.all, sty.logo)}
              >
                <div
                  data-plasmic-name={"寒芒Logo"}
                  data-plasmic-override={overrides.寒芒Logo}
                  className={classNames(projectcss.all, sty.寒芒Logo)}
                >
                  <div
                    data-plasmic-name={"logo2"}
                    data-plasmic-override={overrides.logo2}
                    className={classNames(projectcss.all, sty.logo2)}
                  />
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"logoText"}
                    data-plasmic-override={overrides.logoText}
                    className={classNames(projectcss.all, sty.logoText)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eRvky
                      )}
                    >
                      {"寒芒科技"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e2Fj6
                      )}
                    >
                      {"HanMang Technology"}
                    </div>
                  </div>
                ) : null}
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pqhoE)}
                >
                  <Navbar
                    className={classNames("__wab_instance", sty.navbar__gnxGz)}
                    text={"首页"}
                  />

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Navbar
                      className={classNames(
                        "__wab_instance",
                        sty.navbar__hanNc
                      )}
                      icon={
                        <Icon8Icon
                          data-plasmic-name={"icon3"}
                          data-plasmic-override={overrides.icon3}
                          className={classNames(projectcss.all, sty.icon3)}
                          role={"img"}
                        />
                      }
                      text={"公司介绍"}
                    />
                  ) : null}

                  <Navbar
                    className={classNames("__wab_instance", sty.navbar__yfSi)}
                    icon={
                      <Icon8Icon
                        data-plasmic-name={"icon2"}
                        data-plasmic-override={overrides.icon2}
                        className={classNames(projectcss.all, sty.icon2)}
                        role={"img"}
                      />
                    }
                    iconBase={true}
                    text={"公司项目"}
                  />

                  <Select
                    data-plasmic-name={"select"}
                    data-plasmic-override={overrides.select}
                    aria-label={"" as const}
                    aria-labelledby={"" as const}
                    className={classNames("__wab_instance", sty.select)}
                    name={"" as const}
                    placeholder={"公司项目"}
                  >
                    <Select__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__mZy4A
                      )}
                      value={"value1" as const}
                    >
                      {"Option 1"}
                    </Select__Option>

                    <Select__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__jNsBh
                      )}
                      value={"value2" as const}
                    >
                      {"Option 2"}
                    </Select__Option>

                    <Select__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__d8AKt
                      )}
                      value={"value2 2" as const}
                    >
                      {"Option 2"}
                    </Select__Option>

                    <Select__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__fgUz3
                      )}
                      value={"value2 3" as const}
                    >
                      {"Option 2"}
                    </Select__Option>
                  </Select>

                  <Navbar
                    className={classNames("__wab_instance", sty.navbar__xBavj)}
                    icon={
                      <Icon8Icon
                        data-plasmic-name={"icon4"}
                        data-plasmic-override={overrides.icon4}
                        className={classNames(projectcss.all, sty.icon4)}
                        role={"img"}
                      />
                    }
                    text={"联系我们"}
                  />
                </p.Stack>
              ) : null}
            </p.Stack>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__oQdDh)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"公司描述"}
                data-plasmic-override={overrides.公司描述}
                hasGap={true}
                className={classNames(projectcss.all, sty.公司描述)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"标语"}
                  data-plasmic-override={overrides.标语}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.标语)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__hBbCd)}
                    triggerOnce={true}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        data-plasmic-name={"球"}
                        data-plasmic-override={overrides.球}
                        className={classNames(projectcss.all, sty.球)}
                      />
                    ) : null}

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"文字"}
                      data-plasmic-override={overrides.文字}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.文字)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2E1Ii
                        )}
                      >
                        {"我们提供政商领域专业的软件服务和人工智能解决方案"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__glvjt
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "我们擅长这些方面："
                          : "我们擅长这些方面："}
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"擅长"}
                        data-plasmic-override={overrides.擅长}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.擅长)}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"切换"}
                          data-plasmic-override={overrides.切换}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.切换)}
                        >
                          <div
                            data-plasmic-name={"text5"}
                            data-plasmic-override={overrides.text5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text5
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "APP开发"
                              : "APP开发"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"切换2"}
                          data-plasmic-override={overrides.切换2}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.切换2)}
                        >
                          <div
                            data-plasmic-name={"text6"}
                            data-plasmic-override={overrides.text6}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text6
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "SAAS云平台"
                              : "SaaS云平台"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"切换3"}
                          data-plasmic-override={overrides.切换3}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.切换3)}
                        >
                          <div
                            data-plasmic-name={"text7"}
                            data-plasmic-override={overrides.text7}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text7
                            )}
                          >
                            {"手机端小程序"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"擅长2"}
                        data-plasmic-override={overrides.擅长2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.擅长2)}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"切换4"}
                          data-plasmic-override={overrides.切换4}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.切换4)}
                        >
                          <div
                            data-plasmic-name={"text8"}
                            data-plasmic-override={overrides.text8}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text8
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "机器视觉"
                              : "机器视觉"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"切换5"}
                          data-plasmic-override={overrides.切换5}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.切换5)}
                        >
                          <div
                            data-plasmic-name={"text9"}
                            data-plasmic-override={overrides.text9}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text9
                            )}
                          >
                            {"GPU图像渲染"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"切换6"}
                          data-plasmic-override={overrides.切换6}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.切换6)}
                        >
                          <div
                            data-plasmic-name={"text10"}
                            data-plasmic-override={overrides.text10}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text10
                            )}
                          >
                            {"工业软件开发"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.button)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x6Md
                          )}
                        >
                          {"联系我们"}
                        </div>

                        <SystemarrowRightSLineIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4GzLj
                          )}
                          role={"img"}
                        />
                      </p.Stack>
                    ) : null}
                  </Reveal>
                </p.Stack>

                <div
                  data-plasmic-name={"图片"}
                  data-plasmic-override={overrides.图片}
                  className={classNames(projectcss.all, sty.图片)}
                />
              </p.Stack>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal___65YDx)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"公司介绍"}
                data-plasmic-override={overrides.公司介绍}
                hasGap={true}
                className={classNames(projectcss.all, sty.公司介绍)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__aTufQ)}>
                  <div
                    data-plasmic-name={"hand"}
                    data-plasmic-override={overrides.hand}
                    className={classNames(projectcss.all, sty.hand)}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"right"}
                  data-plasmic-override={overrides.right}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.right)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__dYqIc)}
                    triggerOnce={true}
                  >
                    <div
                      data-plasmic-name={"title"}
                      data-plasmic-override={overrides.title}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.title
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "公司介绍"
                        : "公司介绍"}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"文字2"}
                      data-plasmic-override={overrides.文字2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.文字2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k5AhP
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "成都寒芒科技有限公司是一家以IT技术为核心，专门从事服务及应用软件开发、信息系统集成、软件维保技术服务的高科技企业。\n\n致力于信息化领域的规划、设计、实施、应用、研发、运维服务、项目管理等，具有较高技术水平和丰富实践经验。\n\n通过人工智能为各行业安全高效的运行保驾护航和持续产生增值效应，最终帮助用户通过信息系统和人工智能实现战略目标。"
                          : "成都寒芒科技有限公司是一家以IT技术为核心，专门从事服务及应用软件开发、信息系统集成、软件维保技术服务的高科技企业。\n致力于信息化领域的规划、设计、实施、应用、研发、运维服务、项目管理等，具有较高技术水平和丰富实践经验。\n通过人工智能为各行业安全高效的运行保驾护航和持续产生增值效应，最终帮助用户通过信息系统和人工智能实现战略目标。"}
                      </div>
                    </p.Stack>
                  </Reveal>
                </p.Stack>
              </p.Stack>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__xz0Eh)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"业务领域"}
                data-plasmic-override={overrides.业务领域}
                hasGap={true}
                className={classNames(projectcss.all, sty.业务领域)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__jSlWy)}
                  triggerOnce={true}
                >
                  <div
                    data-plasmic-name={"title2"}
                    data-plasmic-override={overrides.title2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title2
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "业务领域"
                      : "业务领域"}
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"content"}
                    data-plasmic-override={overrides.content}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"文字3"}
                      data-plasmic-override={overrides.文字3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.文字3)}
                    >
                      <div
                        data-plasmic-name={"image15"}
                        data-plasmic-override={overrides.image15}
                        className={classNames(projectcss.all, sty.image15)}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"title3"}
                        data-plasmic-override={overrides.title3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.title3)}
                      >
                        <BuildinggovernmentFillIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0YnjZ
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__o3XLv
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "政务场景解决方案"
                            : "政务场景解决方案"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"text11"}
                        data-plasmic-override={overrides.text11}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.text11)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eDQo
                          )}
                        >
                          {"政务服务平台"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hmt6M
                          )}
                        >
                          {"智慧城市"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9Mnw8
                          )}
                        >
                          {"……"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"文字4"}
                      data-plasmic-override={overrides.文字4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.文字4)}
                    >
                      <div
                        data-plasmic-name={"image12"}
                        data-plasmic-override={overrides.image12}
                        className={classNames(projectcss.all, sty.image12)}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"title4"}
                        data-plasmic-override={overrides.title4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.title4)}
                      >
                        <Businessbriefcase4FillIcon
                          className={classNames(projectcss.all, sty.svg__coV51)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__q13Cp
                          )}
                        >
                          {"商业化解决方案"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"text12"}
                        data-plasmic-override={overrides.text12}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.text12)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iblNr
                          )}
                        >
                          {"企业级营收预测分析平台"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pkeEa
                          )}
                        >
                          {"SaaS服务云平台"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u9NkD
                          )}
                        >
                          {"……"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"文字5"}
                      data-plasmic-override={overrides.文字5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.文字5)}
                    >
                      <div
                        data-plasmic-name={"image14"}
                        data-plasmic-override={overrides.image14}
                        className={classNames(projectcss.all, sty.image14)}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"title5"}
                        data-plasmic-override={overrides.title5}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.title5)}
                      >
                        <Buildingbuilding3FillIcon
                          className={classNames(projectcss.all, sty.svg__pqbQ)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t80Zd
                          )}
                        >
                          {"工业场景解决方案"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"text13"}
                        data-plasmic-override={overrides.text13}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.text13)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___69VTa
                          )}
                        >
                          {"工业生产领域自动化改造"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yVeOx
                          )}
                        >
                          {"……"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </Reveal>
              </p.Stack>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__f9UO)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"客户案例"}
                data-plasmic-override={overrides.客户案例}
                hasGap={true}
                className={classNames(projectcss.all, sty.客户案例)}
              >
                <Reveal
                  className={classNames("__wab_instance", sty.reveal__jSAtp)}
                  triggerOnce={true}
                >
                  <div
                    data-plasmic-name={"title6"}
                    data-plasmic-override={overrides.title6}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title6
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "客户案例"
                      : "客户案例"}
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"content2"}
                    data-plasmic-override={overrides.content2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.content2)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"客户案例3"}
                      data-plasmic-override={overrides.客户案例3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.客户案例3)}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"rectangle2"}
                        data-plasmic-override={overrides.rectangle2}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.rectangle2
                        )}
                        component={Link}
                        href={"/ZhongYan" as const}
                        platform={"nextjs"}
                      />

                      <p.PlasmicLink
                        data-plasmic-name={"title8"}
                        data-plasmic-override={overrides.title8}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.title8
                        )}
                        component={Link}
                        href={"/ZhongYan" as const}
                        platform={"nextjs"}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "中烟公司自动化烤烟分级解决方案"
                          : "中烟公司自动化烤烟分级解决方案"}
                      </p.PlasmicLink>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag2"}
                        data-plasmic-override={overrides.tag2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag2)}
                      >
                        <div
                          data-plasmic-name={"工业化机器视觉领域"}
                          data-plasmic-override={overrides.工业化机器视觉领域}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.工业化机器视觉领域
                          )}
                        >
                          {"#工业化机器视觉领域"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"客户案例6"}
                      data-plasmic-override={overrides.客户案例6}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.客户案例6)}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"rectangle5"}
                        data-plasmic-override={overrides.rectangle5}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.rectangle5
                        )}
                        component={Link}
                        href={"/WeChatFood" as const}
                        platform={"nextjs"}
                      />

                      <p.PlasmicLink
                        data-plasmic-name={"title13"}
                        data-plasmic-override={overrides.title13}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.title13
                        )}
                        component={Link}
                        href={"/WeChatFood" as const}
                        platform={"nextjs"}
                      >
                        {"餐饮端微信小程序SaaS服务云平台 "}
                      </p.PlasmicLink>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag5"}
                        data-plasmic-override={overrides.tag5}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag5)}
                      >
                        <div
                          data-plasmic-name={"工业化机器视觉领域4"}
                          data-plasmic-override={overrides.工业化机器视觉领域4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.工业化机器视觉领域4
                          )}
                        >
                          {"#商业化解决方案领域"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"客户案例4"}
                      data-plasmic-override={overrides.客户案例4}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.客户案例4)}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"rectangle3"}
                        data-plasmic-override={overrides.rectangle3}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.rectangle3
                        )}
                        component={Link}
                        href={"/SkyworthAnalysis" as const}
                        platform={"nextjs"}
                      />

                      <p.PlasmicLink
                        data-plasmic-name={"title9"}
                        data-plasmic-override={overrides.title9}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.title9
                        )}
                        component={Link}
                        href={"/SkyworthAnalysis" as const}
                        platform={"nextjs"}
                      >
                        {"创维集团自动化营收预测分析平台"}
                      </p.PlasmicLink>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag3"}
                        data-plasmic-override={overrides.tag3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag3)}
                      >
                        <div
                          data-plasmic-name={"工业化机器视觉领域2"}
                          data-plasmic-override={overrides.工业化机器视觉领域2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.工业化机器视觉领域2
                          )}
                        >
                          {"#商业化解决方案领域"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"客户案例5"}
                      data-plasmic-override={overrides.客户案例5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.客户案例5)}
                    >
                      <p.PlasmicLink
                        data-plasmic-name={"rectangle4"}
                        data-plasmic-override={overrides.rectangle4}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.rectangle4
                        )}
                        component={Link}
                        href={"/SkyworthMonitoring" as const}
                        platform={"nextjs"}
                      />

                      <p.PlasmicLink
                        data-plasmic-name={"title10"}
                        data-plasmic-override={overrides.title10}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.title10
                        )}
                        component={Link}
                        href={"/SkyworthMonitoring" as const}
                        platform={"nextjs"}
                      >
                        {"创维集团营收监控数字大屏"}
                      </p.PlasmicLink>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag4"}
                        data-plasmic-override={overrides.tag4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag4)}
                      >
                        <div
                          data-plasmic-name={"工业化机器视觉领域3"}
                          data-plasmic-override={overrides.工业化机器视觉领域3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.工业化机器视觉领域3
                          )}
                        >
                          {"#商业化解决方案领域"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </Reveal>
              </p.Stack>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__sd0Fu)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"人员占比"}
                data-plasmic-override={overrides.人员占比}
                hasGap={true}
                className={classNames(projectcss.all, sty.人员占比)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"content3"}
                  data-plasmic-override={overrides.content3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content3)}
                >
                  <div
                    data-plasmic-name={"brand2"}
                    data-plasmic-override={overrides.brand2}
                    className={classNames(projectcss.all, sty.brand2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rsKeE)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__zhMmy)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100px" as const)
                            : ("150px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/寒芒/images/logoAnker.webp",
                          fullWidth: 493,
                          fullHeight: 306,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__zhzo8)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__aw5CA)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100px" as const)
                            : ("150px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/寒芒/images/logoJhl.webp",
                          fullWidth: 493,
                          fullHeight: 306,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__gAoTn)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__nf9In)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100px" as const)
                            : ("150px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/寒芒/images/logoZte.png",
                          fullWidth: 494,
                          fullHeight: 306,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5WNXh
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___8DdtL)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100px" as const)
                            : ("150px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/寒芒/images/logoJd.webp",
                          fullWidth: 493,
                          fullHeight: 306,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__uo0Jz)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___1F7AX)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100px" as const)
                            : ("150px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/寒芒/images/logoSkyworth.png",
                          fullWidth: 493,
                          fullHeight: 306,
                          aspectRatio: undefined
                        }}
                      />
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__jv016)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__yVjOx)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100px" as const)
                            : ("150px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("100%" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/寒芒/images/logoMomo.png",
                          fullWidth: 780,
                          fullHeight: 384,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"文字6"}
                    data-plasmic-override={overrides.文字6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.文字6)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__q3A1I
                      )}
                    >
                      {"大厂背景人员占比90%"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__f1Uix
                      )}
                    >
                      {"安克创新视觉算法工程师"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cdNV
                      )}
                    >
                      {"季华实验室研发工程师"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r3IXu
                      )}
                    >
                      {"中兴通讯20年经验安卓开发工程师"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c2Hl
                      )}
                    >
                      {"京东研发工程师"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___04X
                      )}
                    >
                      {"创维集团产品经理"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ik2Wp
                      )}
                    >
                      {"陌陌数据产品经理等"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__cksvk)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"擅长技术栈"}
                data-plasmic-override={overrides.擅长技术栈}
                hasGap={true}
                className={classNames(projectcss.all, sty.擅长技术栈)}
              >
                <div
                  data-plasmic-name={"title11"}
                  data-plasmic-override={overrides.title11}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.title11
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "擅长技术栈"
                    : "擅长技术栈"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__grMet)}>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"技术栈9"}
                    data-plasmic-override={overrides.技术栈9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.技术栈9)}
                  >
                    <div
                      data-plasmic-name={"image2"}
                      data-plasmic-override={overrides.image2}
                      className={classNames(projectcss.all, sty.image2)}
                    />

                    <div
                      data-plasmic-name={"text22"}
                      data-plasmic-override={overrides.text22}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text22
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "安卓相机应用开发"
                        : "安卓相机应用开发"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"技术栈10"}
                    data-plasmic-override={overrides.技术栈10}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.技术栈10)}
                  >
                    <div
                      data-plasmic-name={"image8"}
                      data-plasmic-override={overrides.image8}
                      className={classNames(projectcss.all, sty.image8)}
                    />

                    <div
                      data-plasmic-name={"text23"}
                      data-plasmic-override={overrides.text23}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text23
                      )}
                    >
                      {"OpenGL"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"技术栈11"}
                    data-plasmic-override={overrides.技术栈11}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.技术栈11)}
                  >
                    <div
                      data-plasmic-name={"image18"}
                      data-plasmic-override={overrides.image18}
                      className={classNames(projectcss.all, sty.image18)}
                    />

                    <div
                      data-plasmic-name={"text24"}
                      data-plasmic-override={overrides.text24}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text24
                      )}
                    >
                      {"3D渲染"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"技术栈12"}
                    data-plasmic-override={overrides.技术栈12}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.技术栈12)}
                  >
                    <div
                      data-plasmic-name={"image19"}
                      data-plasmic-override={overrides.image19}
                      className={classNames(projectcss.all, sty.image19)}
                    />

                    <div
                      data-plasmic-name={"text25"}
                      data-plasmic-override={overrides.text25}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text25
                      )}
                    >
                      {"三维轮廓扫描"}
                    </div>
                  </p.Stack>

                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"技术栈13"}
                      data-plasmic-override={overrides.技术栈13}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.技术栈13)}
                    >
                      <div
                        data-plasmic-name={"image20"}
                        data-plasmic-override={overrides.image20}
                        className={classNames(projectcss.all, sty.image20)}
                      />

                      <div
                        data-plasmic-name={"text26"}
                        data-plasmic-override={overrides.text26}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text26
                        )}
                      >
                        {"结构光立体视觉"}
                      </div>
                    </p.Stack>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"技术栈14"}
                    data-plasmic-override={overrides.技术栈14}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.技术栈14)}
                  >
                    <div
                      data-plasmic-name={"image21"}
                      data-plasmic-override={overrides.image21}
                      className={classNames(projectcss.all, sty.image21)}
                    />

                    <div
                      data-plasmic-name={"text27"}
                      data-plasmic-override={overrides.text27}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text27
                      )}
                    >
                      {"相机标定"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"技术栈15"}
                    data-plasmic-override={overrides.技术栈15}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.技术栈15)}
                  >
                    <div
                      data-plasmic-name={"image22"}
                      data-plasmic-override={overrides.image22}
                      className={classNames(projectcss.all, sty.image22)}
                    />

                    <div
                      data-plasmic-name={"text28"}
                      data-plasmic-override={overrides.text28}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text28
                      )}
                    >
                      {"计算机视觉CV任务"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"技术栈16"}
                    data-plasmic-override={overrides.技术栈16}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.技术栈16)}
                  >
                    <div
                      data-plasmic-name={"image23"}
                      data-plasmic-override={overrides.image23}
                      className={classNames(projectcss.all, sty.image23)}
                    />

                    <div
                      data-plasmic-name={"text29"}
                      data-plasmic-override={overrides.text29}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text29
                      )}
                    >
                      {"激光/视觉SLAM"}
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </Reveal>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "content5",
    "logo",
    "寒芒Logo",
    "logo2",
    "logoText",
    "icon3",
    "icon2",
    "select",
    "icon4",
    "公司描述",
    "标语",
    "球",
    "文字",
    "擅长",
    "切换",
    "text5",
    "切换2",
    "text6",
    "切换3",
    "text7",
    "擅长2",
    "切换4",
    "text8",
    "切换5",
    "text9",
    "切换6",
    "text10",
    "button",
    "图片",
    "公司介绍",
    "hand",
    "right",
    "title",
    "文字2",
    "业务领域",
    "title2",
    "content",
    "文字3",
    "image15",
    "title3",
    "text11",
    "文字4",
    "image12",
    "title4",
    "text12",
    "文字5",
    "image14",
    "title5",
    "text13",
    "客户案例",
    "title6",
    "content2",
    "客户案例3",
    "rectangle2",
    "title8",
    "tag2",
    "工业化机器视觉领域",
    "客户案例6",
    "rectangle5",
    "title13",
    "tag5",
    "工业化机器视觉领域4",
    "客户案例4",
    "rectangle3",
    "title9",
    "tag3",
    "工业化机器视觉领域2",
    "客户案例5",
    "rectangle4",
    "title10",
    "tag4",
    "工业化机器视觉领域3",
    "人员占比",
    "content3",
    "brand2",
    "文字6",
    "擅长技术栈",
    "title11",
    "技术栈9",
    "image2",
    "text22",
    "技术栈10",
    "image8",
    "text23",
    "技术栈11",
    "image18",
    "text24",
    "技术栈12",
    "image19",
    "text25",
    "技术栈13",
    "image20",
    "text26",
    "技术栈14",
    "image21",
    "text27",
    "技术栈15",
    "image22",
    "text28",
    "技术栈16",
    "image23",
    "text29",
    "footer"
  ],
  content5: [
    "content5",
    "logo",
    "寒芒Logo",
    "logo2",
    "logoText",
    "icon3",
    "icon2",
    "select",
    "icon4",
    "公司描述",
    "标语",
    "球",
    "文字",
    "擅长",
    "切换",
    "text5",
    "切换2",
    "text6",
    "切换3",
    "text7",
    "擅长2",
    "切换4",
    "text8",
    "切换5",
    "text9",
    "切换6",
    "text10",
    "button",
    "图片",
    "公司介绍",
    "hand",
    "right",
    "title",
    "文字2",
    "业务领域",
    "title2",
    "content",
    "文字3",
    "image15",
    "title3",
    "text11",
    "文字4",
    "image12",
    "title4",
    "text12",
    "文字5",
    "image14",
    "title5",
    "text13",
    "客户案例",
    "title6",
    "content2",
    "客户案例3",
    "rectangle2",
    "title8",
    "tag2",
    "工业化机器视觉领域",
    "客户案例6",
    "rectangle5",
    "title13",
    "tag5",
    "工业化机器视觉领域4",
    "客户案例4",
    "rectangle3",
    "title9",
    "tag3",
    "工业化机器视觉领域2",
    "客户案例5",
    "rectangle4",
    "title10",
    "tag4",
    "工业化机器视觉领域3",
    "人员占比",
    "content3",
    "brand2",
    "文字6",
    "擅长技术栈",
    "title11",
    "技术栈9",
    "image2",
    "text22",
    "技术栈10",
    "image8",
    "text23",
    "技术栈11",
    "image18",
    "text24",
    "技术栈12",
    "image19",
    "text25",
    "技术栈13",
    "image20",
    "text26",
    "技术栈14",
    "image21",
    "text27",
    "技术栈15",
    "image22",
    "text28",
    "技术栈16",
    "image23",
    "text29",
    "footer"
  ],
  logo: ["logo", "寒芒Logo", "logo2", "logoText"],
  寒芒Logo: ["寒芒Logo", "logo2"],
  logo2: ["logo2"],
  logoText: ["logoText"],
  icon3: ["icon3"],
  icon2: ["icon2"],
  select: ["select"],
  icon4: ["icon4"],
  公司描述: [
    "公司描述",
    "标语",
    "球",
    "文字",
    "擅长",
    "切换",
    "text5",
    "切换2",
    "text6",
    "切换3",
    "text7",
    "擅长2",
    "切换4",
    "text8",
    "切换5",
    "text9",
    "切换6",
    "text10",
    "button",
    "图片"
  ],
  标语: [
    "标语",
    "球",
    "文字",
    "擅长",
    "切换",
    "text5",
    "切换2",
    "text6",
    "切换3",
    "text7",
    "擅长2",
    "切换4",
    "text8",
    "切换5",
    "text9",
    "切换6",
    "text10",
    "button"
  ],
  球: ["球"],
  文字: [
    "文字",
    "擅长",
    "切换",
    "text5",
    "切换2",
    "text6",
    "切换3",
    "text7",
    "擅长2",
    "切换4",
    "text8",
    "切换5",
    "text9",
    "切换6",
    "text10"
  ],
  擅长: ["擅长", "切换", "text5", "切换2", "text6", "切换3", "text7"],
  切换: ["切换", "text5"],
  text5: ["text5"],
  切换2: ["切换2", "text6"],
  text6: ["text6"],
  切换3: ["切换3", "text7"],
  text7: ["text7"],
  擅长2: ["擅长2", "切换4", "text8", "切换5", "text9", "切换6", "text10"],
  切换4: ["切换4", "text8"],
  text8: ["text8"],
  切换5: ["切换5", "text9"],
  text9: ["text9"],
  切换6: ["切换6", "text10"],
  text10: ["text10"],
  button: ["button"],
  图片: ["图片"],
  公司介绍: ["公司介绍", "hand", "right", "title", "文字2"],
  hand: ["hand"],
  right: ["right", "title", "文字2"],
  title: ["title"],
  文字2: ["文字2"],
  业务领域: [
    "业务领域",
    "title2",
    "content",
    "文字3",
    "image15",
    "title3",
    "text11",
    "文字4",
    "image12",
    "title4",
    "text12",
    "文字5",
    "image14",
    "title5",
    "text13"
  ],
  title2: ["title2"],
  content: [
    "content",
    "文字3",
    "image15",
    "title3",
    "text11",
    "文字4",
    "image12",
    "title4",
    "text12",
    "文字5",
    "image14",
    "title5",
    "text13"
  ],
  文字3: ["文字3", "image15", "title3", "text11"],
  image15: ["image15"],
  title3: ["title3"],
  text11: ["text11"],
  文字4: ["文字4", "image12", "title4", "text12"],
  image12: ["image12"],
  title4: ["title4"],
  text12: ["text12"],
  文字5: ["文字5", "image14", "title5", "text13"],
  image14: ["image14"],
  title5: ["title5"],
  text13: ["text13"],
  客户案例: [
    "客户案例",
    "title6",
    "content2",
    "客户案例3",
    "rectangle2",
    "title8",
    "tag2",
    "工业化机器视觉领域",
    "客户案例6",
    "rectangle5",
    "title13",
    "tag5",
    "工业化机器视觉领域4",
    "客户案例4",
    "rectangle3",
    "title9",
    "tag3",
    "工业化机器视觉领域2",
    "客户案例5",
    "rectangle4",
    "title10",
    "tag4",
    "工业化机器视觉领域3"
  ],
  title6: ["title6"],
  content2: [
    "content2",
    "客户案例3",
    "rectangle2",
    "title8",
    "tag2",
    "工业化机器视觉领域",
    "客户案例6",
    "rectangle5",
    "title13",
    "tag5",
    "工业化机器视觉领域4",
    "客户案例4",
    "rectangle3",
    "title9",
    "tag3",
    "工业化机器视觉领域2",
    "客户案例5",
    "rectangle4",
    "title10",
    "tag4",
    "工业化机器视觉领域3"
  ],
  客户案例3: [
    "客户案例3",
    "rectangle2",
    "title8",
    "tag2",
    "工业化机器视觉领域"
  ],
  rectangle2: ["rectangle2"],
  title8: ["title8"],
  tag2: ["tag2", "工业化机器视觉领域"],
  工业化机器视觉领域: ["工业化机器视觉领域"],
  客户案例6: [
    "客户案例6",
    "rectangle5",
    "title13",
    "tag5",
    "工业化机器视觉领域4"
  ],
  rectangle5: ["rectangle5"],
  title13: ["title13"],
  tag5: ["tag5", "工业化机器视觉领域4"],
  工业化机器视觉领域4: ["工业化机器视觉领域4"],
  客户案例4: [
    "客户案例4",
    "rectangle3",
    "title9",
    "tag3",
    "工业化机器视觉领域2"
  ],
  rectangle3: ["rectangle3"],
  title9: ["title9"],
  tag3: ["tag3", "工业化机器视觉领域2"],
  工业化机器视觉领域2: ["工业化机器视觉领域2"],
  客户案例5: [
    "客户案例5",
    "rectangle4",
    "title10",
    "tag4",
    "工业化机器视觉领域3"
  ],
  rectangle4: ["rectangle4"],
  title10: ["title10"],
  tag4: ["tag4", "工业化机器视觉领域3"],
  工业化机器视觉领域3: ["工业化机器视觉领域3"],
  人员占比: ["人员占比", "content3", "brand2", "文字6"],
  content3: ["content3", "brand2", "文字6"],
  brand2: ["brand2"],
  文字6: ["文字6"],
  擅长技术栈: [
    "擅长技术栈",
    "title11",
    "技术栈9",
    "image2",
    "text22",
    "技术栈10",
    "image8",
    "text23",
    "技术栈11",
    "image18",
    "text24",
    "技术栈12",
    "image19",
    "text25",
    "技术栈13",
    "image20",
    "text26",
    "技术栈14",
    "image21",
    "text27",
    "技术栈15",
    "image22",
    "text28",
    "技术栈16",
    "image23",
    "text29"
  ],
  title11: ["title11"],
  技术栈9: ["技术栈9", "image2", "text22"],
  image2: ["image2"],
  text22: ["text22"],
  技术栈10: ["技术栈10", "image8", "text23"],
  image8: ["image8"],
  text23: ["text23"],
  技术栈11: ["技术栈11", "image18", "text24"],
  image18: ["image18"],
  text24: ["text24"],
  技术栈12: ["技术栈12", "image19", "text25"],
  image19: ["image19"],
  text25: ["text25"],
  技术栈13: ["技术栈13", "image20", "text26"],
  image20: ["image20"],
  text26: ["text26"],
  技术栈14: ["技术栈14", "image21", "text27"],
  image21: ["image21"],
  text27: ["text27"],
  技术栈15: ["技术栈15", "image22", "text28"],
  image22: ["image22"],
  text28: ["text28"],
  技术栈16: ["技术栈16", "image23", "text29"],
  image23: ["image23"],
  text29: ["text29"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  content5: "div";
  logo: "div";
  寒芒Logo: "div";
  logo2: "div";
  logoText: "div";
  icon3: "svg";
  icon2: "svg";
  select: typeof Select;
  icon4: "svg";
  公司描述: "div";
  标语: "div";
  球: "div";
  文字: "div";
  擅长: "div";
  切换: "div";
  text5: "div";
  切换2: "div";
  text6: "div";
  切换3: "div";
  text7: "div";
  擅长2: "div";
  切换4: "div";
  text8: "div";
  切换5: "div";
  text9: "div";
  切换6: "div";
  text10: "div";
  button: "div";
  图片: "div";
  公司介绍: "div";
  hand: "div";
  right: "div";
  title: "div";
  文字2: "div";
  业务领域: "div";
  title2: "div";
  content: "div";
  文字3: "div";
  image15: "div";
  title3: "div";
  text11: "div";
  文字4: "div";
  image12: "div";
  title4: "div";
  text12: "div";
  文字5: "div";
  image14: "div";
  title5: "div";
  text13: "div";
  客户案例: "div";
  title6: "div";
  content2: "div";
  客户案例3: "div";
  rectangle2: "a";
  title8: "a";
  tag2: "div";
  工业化机器视觉领域: "div";
  客户案例6: "div";
  rectangle5: "a";
  title13: "a";
  tag5: "div";
  工业化机器视觉领域4: "div";
  客户案例4: "div";
  rectangle3: "a";
  title9: "a";
  tag3: "div";
  工业化机器视觉领域2: "div";
  客户案例5: "div";
  rectangle4: "a";
  title10: "a";
  tag4: "div";
  工业化机器视觉领域3: "div";
  人员占比: "div";
  content3: "div";
  brand2: "div";
  文字6: "div";
  擅长技术栈: "div";
  title11: "div";
  技术栈9: "div";
  image2: "div";
  text22: "div";
  技术栈10: "div";
  image8: "div";
  text23: "div";
  技术栈11: "div";
  image18: "div";
  text24: "div";
  技术栈12: "div";
  image19: "div";
  text25: "div";
  技术栈13: "div";
  image20: "div";
  text26: "div";
  技术栈14: "div";
  image21: "div";
  text27: "div";
  技术栈15: "div";
  image22: "div";
  text28: "div";
  技术栈16: "div";
  image23: "div";
  text29: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic成都寒芒科技有限公司__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic成都寒芒科技有限公司__VariantsArgs;
    args?: Plasmic成都寒芒科技有限公司__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic成都寒芒科技有限公司__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic成都寒芒科技有限公司__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: Plasmic成都寒芒科技有限公司__ArgProps,
          internalVariantPropNames: Plasmic成都寒芒科技有限公司__VariantProps
        }),
      [props, nodeName]
    );

    return Plasmic成都寒芒科技有限公司__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic成都寒芒科技有限公司";
  } else {
    func.displayName = `Plasmic成都寒芒科技有限公司.${nodeName}`;
  }
  return func;
}

export const Plasmic成都寒芒科技有限公司 = Object.assign(
  // Top-level Plasmic成都寒芒科技有限公司 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    content5: makeNodeComponent("content5"),
    logo: makeNodeComponent("logo"),
    寒芒Logo: makeNodeComponent("寒芒Logo"),
    logo2: makeNodeComponent("logo2"),
    logoText: makeNodeComponent("logoText"),
    icon3: makeNodeComponent("icon3"),
    icon2: makeNodeComponent("icon2"),
    select: makeNodeComponent("select"),
    icon4: makeNodeComponent("icon4"),
    公司描述: makeNodeComponent("公司描述"),
    标语: makeNodeComponent("标语"),
    球: makeNodeComponent("球"),
    文字: makeNodeComponent("文字"),
    擅长: makeNodeComponent("擅长"),
    切换: makeNodeComponent("切换"),
    text5: makeNodeComponent("text5"),
    切换2: makeNodeComponent("切换2"),
    text6: makeNodeComponent("text6"),
    切换3: makeNodeComponent("切换3"),
    text7: makeNodeComponent("text7"),
    擅长2: makeNodeComponent("擅长2"),
    切换4: makeNodeComponent("切换4"),
    text8: makeNodeComponent("text8"),
    切换5: makeNodeComponent("切换5"),
    text9: makeNodeComponent("text9"),
    切换6: makeNodeComponent("切换6"),
    text10: makeNodeComponent("text10"),
    button: makeNodeComponent("button"),
    图片: makeNodeComponent("图片"),
    公司介绍: makeNodeComponent("公司介绍"),
    hand: makeNodeComponent("hand"),
    right: makeNodeComponent("right"),
    title: makeNodeComponent("title"),
    文字2: makeNodeComponent("文字2"),
    业务领域: makeNodeComponent("业务领域"),
    title2: makeNodeComponent("title2"),
    content: makeNodeComponent("content"),
    文字3: makeNodeComponent("文字3"),
    image15: makeNodeComponent("image15"),
    title3: makeNodeComponent("title3"),
    text11: makeNodeComponent("text11"),
    文字4: makeNodeComponent("文字4"),
    image12: makeNodeComponent("image12"),
    title4: makeNodeComponent("title4"),
    text12: makeNodeComponent("text12"),
    文字5: makeNodeComponent("文字5"),
    image14: makeNodeComponent("image14"),
    title5: makeNodeComponent("title5"),
    text13: makeNodeComponent("text13"),
    客户案例: makeNodeComponent("客户案例"),
    title6: makeNodeComponent("title6"),
    content2: makeNodeComponent("content2"),
    客户案例3: makeNodeComponent("客户案例3"),
    rectangle2: makeNodeComponent("rectangle2"),
    title8: makeNodeComponent("title8"),
    tag2: makeNodeComponent("tag2"),
    工业化机器视觉领域: makeNodeComponent("工业化机器视觉领域"),
    客户案例6: makeNodeComponent("客户案例6"),
    rectangle5: makeNodeComponent("rectangle5"),
    title13: makeNodeComponent("title13"),
    tag5: makeNodeComponent("tag5"),
    工业化机器视觉领域4: makeNodeComponent("工业化机器视觉领域4"),
    客户案例4: makeNodeComponent("客户案例4"),
    rectangle3: makeNodeComponent("rectangle3"),
    title9: makeNodeComponent("title9"),
    tag3: makeNodeComponent("tag3"),
    工业化机器视觉领域2: makeNodeComponent("工业化机器视觉领域2"),
    客户案例5: makeNodeComponent("客户案例5"),
    rectangle4: makeNodeComponent("rectangle4"),
    title10: makeNodeComponent("title10"),
    tag4: makeNodeComponent("tag4"),
    工业化机器视觉领域3: makeNodeComponent("工业化机器视觉领域3"),
    人员占比: makeNodeComponent("人员占比"),
    content3: makeNodeComponent("content3"),
    brand2: makeNodeComponent("brand2"),
    文字6: makeNodeComponent("文字6"),
    擅长技术栈: makeNodeComponent("擅长技术栈"),
    title11: makeNodeComponent("title11"),
    技术栈9: makeNodeComponent("技术栈9"),
    image2: makeNodeComponent("image2"),
    text22: makeNodeComponent("text22"),
    技术栈10: makeNodeComponent("技术栈10"),
    image8: makeNodeComponent("image8"),
    text23: makeNodeComponent("text23"),
    技术栈11: makeNodeComponent("技术栈11"),
    image18: makeNodeComponent("image18"),
    text24: makeNodeComponent("text24"),
    技术栈12: makeNodeComponent("技术栈12"),
    image19: makeNodeComponent("image19"),
    text25: makeNodeComponent("text25"),
    技术栈13: makeNodeComponent("技术栈13"),
    image20: makeNodeComponent("image20"),
    text26: makeNodeComponent("text26"),
    技术栈14: makeNodeComponent("技术栈14"),
    image21: makeNodeComponent("image21"),
    text27: makeNodeComponent("text27"),
    技术栈15: makeNodeComponent("技术栈15"),
    image22: makeNodeComponent("image22"),
    text28: makeNodeComponent("text28"),
    技术栈16: makeNodeComponent("技术栈16"),
    image23: makeNodeComponent("image23"),
    text29: makeNodeComponent("text29"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for Plasmic成都寒芒科技有限公司
    internalVariantProps: Plasmic成都寒芒科技有限公司__VariantProps,
    internalArgProps: Plasmic成都寒芒科技有限公司__ArgProps
  }
);

export default Plasmic成都寒芒科技有限公司;
/* prettier-ignore-end */
