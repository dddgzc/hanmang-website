// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7jQgmBmKYyCbHXSekk2FRy
// Component: 45L0kj6gGa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: w7EiyFeNrat/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Footer from "../../Footer"; // plasmic-import: ZF4Tnw-zFby/component

import { useScreenVariants as useScreenVariantskJp4EfKscK4Tw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: kJp4efKscK4Tw/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_寒芒.module.css"; // plasmic-import: 7jQgmBmKYyCbHXSekk2FRy/projectcss
import sty from "./Plasmic创维监控.module.css"; // plasmic-import: 45L0kj6gGa/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: jxcxtzGjitd/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 61HpChsnqny/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: sppbhFlWBH/icon
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: GRHYClSzKo/icon
import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: ln9DKyplRt/icon
import Icon49Icon from "./icons/PlasmicIcon__Icon49"; // plasmic-import: _HLglV03x8/icon
import Icon51Icon from "./icons/PlasmicIcon__Icon51"; // plasmic-import: hpQ2oX6i4w/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: xPXMlJZnbQ/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: qO_UVpfk2WP/icon
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: GurOEHVTX9/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: 9CuvWPFeIk/icon
import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: R_tCb33gQ5/icon
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: 86nn0N1sU0/icon
import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: lROrt32sRH/icon
import Icon57Icon from "./icons/PlasmicIcon__Icon57"; // plasmic-import: ZiFF4uiFmh/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: cM1aNF6tRS/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: X-CvFO8F2r/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: BOi5e44CqZ/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: fTEoi4xtkr/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: CPrZBowKmb/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MnPSDNx1dHt/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: AVvOQiMFXTC/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: zVLtnvVHUj/icon

export type Plasmic创维监控__VariantMembers = {};

export type Plasmic创维监控__VariantsArgs = {};
type VariantPropType = keyof Plasmic创维监控__VariantsArgs;
export const Plasmic创维监控__VariantProps = new Array<VariantPropType>();

export type Plasmic创维监控__ArgsType = {};
type ArgPropType = keyof Plasmic创维监控__ArgsType;
export const Plasmic创维监控__ArgProps = new Array<ArgPropType>();

export type Plasmic创维监控__OverridesType = {
  root?: p.Flex<"div">;
  content?: p.Flex<"div">;
  navbar?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  寒芒Logo?: p.Flex<"div">;
  logo2?: p.Flex<"div">;
  logoText?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  公司描述?: p.Flex<"div">;
  文字?: p.Flex<"div">;
  image9?: p.Flex<"div">;
  tag?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  业务领域?: p.Flex<"div">;
  image24?: p.Flex<"div">;
  frame28?: p.Flex<"div">;
  title?: p.Flex<"div">;
  section?: p.Flex<"section">;
  foreground3?: p.Flex<"div">;
  frame35?: p.Flex<"div">;
  title5?: p.Flex<"div">;
  title6?: p.Flex<"div">;
  客户案例2?: p.Flex<"div">;
  成果1?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  文字3?: p.Flex<"div">;
  成果?: p.Flex<"div">;
  title4?: p.Flex<"div">;
  image8?: p.Flex<"div">;
  经济效益2?: p.Flex<"section">;
  foreground2?: p.Flex<"div">;
  icon经济效益?: p.Flex<typeof p.PlasmicImg>;
  竞争优势?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface Default创维监控Props {}

function Plasmic创维监控__RenderFunc(props: {
  variants: Plasmic创维监控__VariantsArgs;
  args: Plasmic创维监控__ArgsType;
  overrides: Plasmic创维监控__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskJp4EfKscK4Tw()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"创维集团营收监控数字大屏"}</title>

        <meta
          key="og:title"
          property="og:title"
          content={"创维集团营收监控数字大屏"}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"创维集团营收监控数字大屏"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            className={classNames(projectcss.all, sty.content)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              hasGap={true}
              className={classNames(projectcss.all, sty.navbar)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                hasGap={true}
                className={classNames(projectcss.all, sty.logo)}
              >
                <div
                  data-plasmic-name={"寒芒Logo"}
                  data-plasmic-override={overrides.寒芒Logo}
                  className={classNames(projectcss.all, sty.寒芒Logo)}
                >
                  <div
                    data-plasmic-name={"logo2"}
                    data-plasmic-override={overrides.logo2}
                    className={classNames(projectcss.all, sty.logo2)}
                  />
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"logoText"}
                    data-plasmic-override={overrides.logoText}
                    className={classNames(projectcss.all, sty.logoText)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__el4Hd
                      )}
                    >
                      {"寒芒科技"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pzPdd
                      )}
                    >
                      {"HanMang Technology"}
                    </div>
                  </div>
                ) : null}
              </p.Stack>

              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                link={"/" as const}
              >
                {"返回首页"}
              </Button>
            </p.Stack>

            <Reveal
              className={classNames("__wab_instance", sty.reveal___824M0)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"公司描述"}
                data-plasmic-override={overrides.公司描述}
                hasGap={true}
                className={classNames(projectcss.all, sty.公司描述)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"文字"}
                  data-plasmic-override={overrides.文字}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.文字)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"image9"}
                      data-plasmic-override={overrides.image9}
                      className={classNames(projectcss.all, sty.image9)}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ipdp9
                    )}
                  >
                    {"创维集团营收监控数字大屏"}
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"tag"}
                    data-plasmic-override={overrides.tag}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.tag)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__noL5
                      )}
                    >
                      {"#商业化解决方案领域"}
                    </div>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__kHWu3)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rzQg4)}
                    >
                      {true ? (
                        <Icon47Icon
                          className={classNames(projectcss.all, sty.svg__keVwe)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__awbrd
                        )}
                      >
                        {
                          "在各行业精细化、数据化运营转型升级大背景下，大屏数字看板的需求在不断的增加。\r"
                        }
                      </div>

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gvAeo
                          )}
                        >
                          {"90%"}
                        </div>
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hic1C)}
                    >
                      {true ? (
                        <Icon48Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___5JMsz
                          )}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dfqn5
                        )}
                      >
                        {
                          "对已有的指标进行持续监控和预警，保证业务的正常进行，发现分析业务/产品的问题及发展趋势，将问题扼杀在萌芽之中。\r"
                        }
                      </div>

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__veOkk
                          )}
                        >
                          {"90%"}
                        </div>
                      ) : null}
                    </p.Stack>
                  </div>
                </p.Stack>

                <div
                  data-plasmic-name={"frame4"}
                  data-plasmic-override={overrides.frame4}
                  className={classNames(projectcss.all, sty.frame4)}
                />
              </p.Stack>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__lbmql)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"业务领域"}
                data-plasmic-override={overrides.业务领域}
                hasGap={true}
                className={classNames(projectcss.all, sty.业务领域)}
              >
                <div
                  data-plasmic-name={"image24"}
                  data-plasmic-override={overrides.image24}
                  className={classNames(projectcss.all, sty.image24)}
                />

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame28"}
                  data-plasmic-override={overrides.frame28}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame28)}
                >
                  <div
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title
                    )}
                  >
                    {"行业痛点"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__wXat8)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__p3Yno)}
                    >
                      {true ? (
                        <Icon50Icon
                          className={classNames(projectcss.all, sty.svg__t6ReW)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___3EzWl
                        )}
                      >
                        {
                          "从0到1的调研、产品、设计、开发、测试流程繁琐，涉及多方人员共同协作，信息的统一性及需求的理解性不一致。"
                        }
                      </div>

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fTxcy
                          )}
                        >
                          {"90%"}
                        </div>
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__g40EM)}
                    >
                      {true ? (
                        <Icon49Icon
                          className={classNames(projectcss.all, sty.svg__rBeVs)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yAiW3
                        )}
                      >
                        {
                          "数据源及业务需求多种多样，单独开发内容无法在其他业务或场景下快速复用，且涉及到调整时无法快速响应，调整过多会导致多方资源浪费。\r"
                        }
                      </div>

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__w9JlT
                          )}
                        >
                          {"90%"}
                        </div>
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gJ3K)}
                    >
                      {true ? (
                        <Icon51Icon
                          className={classNames(projectcss.all, sty.svg__kQDkD)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vm09A
                        )}
                      >
                        {"数据呈现形式单一，且无法多维度、多场景呈现。"}
                      </div>

                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oSLd
                          )}
                        >
                          {"90%"}
                        </div>
                      ) : null}
                    </p.Stack>
                  </div>
                </p.Stack>
              </p.Stack>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__vsE23)}
              triggerOnce={true}
            >
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rdCit)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oZfi)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame35"}
                        data-plasmic-override={overrides.frame35}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame35)}
                      >
                        <div
                          data-plasmic-name={"title5"}
                          data-plasmic-override={overrides.title5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title5
                          )}
                        >
                          {"解决方案"}
                        </div>

                        <div
                          data-plasmic-name={"title6"}
                          data-plasmic-override={overrides.title6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.title6
                          )}
                        >
                          {"组件化数据看板搭建工具"}
                        </div>
                      </p.Stack>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mNyaL)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__v36Zz)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mKkDh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2BThs
                          )}
                        >
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wJf2N
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uqkJ
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hcypx
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wlRrh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__i60Hg
                            )}
                          >
                            {"简单高效"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pTpE
                            )}
                          >
                            {
                              "优先满足查询效率，交互体验较好，具有丰富的数据展示图表组件库。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__q97GG
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wFcBh
                          )}
                        >
                          <Icon31Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__azhRo
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__asf88
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__gq6Ty
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sl2VE
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xNshW
                            )}
                          >
                            {"自定义数据"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lZzol
                            )}
                          >
                            {
                              "可根据各种业务需求导入不同格式的数据源，同时可调整关联性，具备自动数据变化对比功能。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gdZgw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uSfG3
                          )}
                        >
                          <Icon32Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__q9ErR
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__rdqM9
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__sjRjD
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cs9D2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bhxI5
                            )}
                          >
                            {"实时更新"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y4Nps
                            )}
                          >
                            {
                              "数据图表的刷新频次和统计频次可自定义设置，支持实时更新。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___01Gq8)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7GaQt
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pd3Wq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fw8Cx
                          )}
                        >
                          <Icon33Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___0GFdm
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__egBt3
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wGouG
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8SMra
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__auIdr
                            )}
                          >
                            {"呈现类型多样"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zVetj
                            )}
                          >
                            {
                              "自动识别数据之间的关联性，推荐相应的呈现方式，满足趋势规律对比及数字对比。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yohCm
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aFyBm
                          )}
                        >
                          <Icon34Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fhCit
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v6Dbw
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mt06C
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gPmPr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__luRva
                            )}
                          >
                            {"多维度"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iGQvf
                            )}
                          >
                            {
                              "可针对相同数据设置不同维度呈现对比，满足多样化的监测需求。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oBsWk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aEgbf
                          )}
                        >
                          <Icon35Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___9Ci1
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dWl1G
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__btC9F
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9PcKa
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ikxWc
                            )}
                          >
                            {"自定义组件"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___89VuG
                            )}
                          >
                            {
                              "可根据需求进行组件自定义配置，丰富企业个性化的组件库及分析形势。"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </section>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__iYrMe)}
              triggerOnce={true}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"客户案例2"}
                data-plasmic-override={overrides.客户案例2}
                hasGap={true}
                className={classNames(projectcss.all, sty.客户案例2)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"成果1"}
                  data-plasmic-override={overrides.成果1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.成果1)}
                >
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("50%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/寒芒/images/监控成果.webp",
                      fullWidth: 2309,
                      fullHeight: 1380,
                      aspectRatio: undefined
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"文字3"}
                    data-plasmic-override={overrides.文字3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.文字3)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"成果"}
                      data-plasmic-override={overrides.成果}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.成果)}
                    >
                      <div
                        data-plasmic-name={"title4"}
                        data-plasmic-override={overrides.title4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.title4
                        )}
                      >
                        {"成果展示"}
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          data-plasmic-name={"image8"}
                          data-plasmic-override={overrides.image8}
                          className={classNames(projectcss.all, sty.image8)}
                        />
                      ) : null}
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__kCPc)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ry5NY
                        )}
                      >
                        {true ? (
                          <Icon57Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__a4KQ
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___7Shpa
                          )}
                        >
                          {"看板内容可根据实际业务场景进行拖拽快速配置\r"}
                        </div>

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__iDd1F
                            )}
                          >
                            {"90%"}
                          </div>
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3LIy
                        )}
                      >
                        {true ? (
                          <Icon2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__c6Ojq
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bgEdq
                          )}
                        >
                          {"提供样式丰富，场景多样的的模板\r"}
                        </div>

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ordIg
                            )}
                          >
                            {"90%"}
                          </div>
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tzEbd
                        )}
                      >
                        {true ? (
                          <Icon29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___43J3P
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9Ai6
                          )}
                        >
                          {
                            "内置多种图表组件，如：折线图、柱状图、雷达图、桑基图、词云图等\r"
                          }
                        </div>

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fapAv
                            )}
                          >
                            {"90%"}
                          </div>
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uXm90
                        )}
                      >
                        {true ? (
                          <Icon31Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pciT0
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kTIs
                          )}
                        >
                          {
                            "支持数据自定义导入，包含Excel数据导入、json文件等静态数据源和MySQL数据库等常见的关系型数据库的动态数据源接入\r"
                          }
                        </div>

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9MnGq
                            )}
                          >
                            {"90%"}
                          </div>
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vy6Li
                        )}
                      >
                        {true ? (
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__m2CQa
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hgJaK
                          )}
                        >
                          {"自动配置上线，看板数据实时更新\r"}
                        </div>

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__adEWf
                            )}
                          >
                            {"90%"}
                          </div>
                        ) : null}
                      </p.Stack>
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal___99JYl)}
              triggerOnce={true}
            >
              <p.Stack
                as={"section"}
                data-plasmic-name={"经济效益2"}
                data-plasmic-override={overrides.经济效益2}
                hasGap={true}
                className={classNames(projectcss.all, sty.经济效益2)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground2"}
                  data-plasmic-override={overrides.foreground2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__nOtCh)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bqy0L)}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"icon经济效益"}
                        data-plasmic-override={overrides.icon经济效益}
                        alt={""}
                        className={classNames(sty.icon经济效益)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/寒芒/images/icon经济效益.svg",
                          fullWidth: 133,
                          fullHeight: 150,
                          aspectRatio: 0.883495
                        }}
                      />

                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__abapc
                        )}
                      >
                        {"经济效益"}
                      </h2>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__w8Y6
                        )}
                      >
                        {"economic efficiency"}
                      </div>
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.column___1Iw6L)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__p9Tnt)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p3Gs1
                        )}
                      >
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__zhdRz)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2Mwfe
                          )}
                        >
                          {"节省企业分析师人力"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qeBig
                          )}
                        >
                          {"70%"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rtHbT
                        )}
                      >
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__qgVwl)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2PvRy
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "节省分析时长达"
                            : "节省常规分析时长达"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ywFdR
                          )}
                        >
                          {"90%"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nnEqg
                        )}
                      >
                        <Icon10Icon
                          className={classNames(projectcss.all, sty.svg__wrgE1)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3Ohn
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "节省分析时长达"
                            : "节省研发人力"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zqnkh
                          )}
                        >
                          {"50%"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gm7E9
                        )}
                      >
                        <Icon11Icon
                          className={classNames(projectcss.all, sty.svg__yOiAk)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vy9Dh
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "提升分析效率"
                            : "数据看板配置效率提升"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1Sr1Z
                          )}
                        >
                          {"80%"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___1EJxU
                        )}
                      >
                        <Icon11Icon
                          className={classNames(projectcss.all, sty.svg__mvoYy)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fJzTi
                          )}
                        >
                          {"数据准确率"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cCXv
                          )}
                        >
                          {"98%"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rQIfB
                        )}
                      >
                        <Icon11Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4Unwd
                          )}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__clhBv
                          )}
                        >
                          {"产品策略输出时效缩短"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nsIsi
                          )}
                        >
                          {"50%"}
                        </div>
                      </p.Stack>
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>
            </Reveal>

            <div className={classNames(projectcss.all, sty.freeBox__xb2K)} />

            <Reveal
              className={classNames("__wab_instance", sty.reveal___7CaiC)}
              triggerOnce={true}
            >
              <section
                data-plasmic-name={"竞争优势"}
                data-plasmic-override={overrides.竞争优势}
                className={classNames(projectcss.all, sty.竞争优势)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground"}
                  data-plasmic-override={overrides.foreground}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__bgLod)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hLBby)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__vssIq
                        )}
                      >
                        {"竞争优势"}
                      </h2>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hzSm
                      )}
                    >
                      {"competitive advantage"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vZc5)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dCAhA)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mL911
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xrSt4
                          )}
                        >
                          <Icon21Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mTczs
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0XbaI
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xWoTn
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0VS2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__l0C4K
                            )}
                          >
                            {"响应快"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ywAkb
                            )}
                          >
                            {"平台响应速度快，资源调度处理能力强"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r964K
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sl8Zg
                          )}
                        >
                          <Icon18Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rYEtJ
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kjfGa
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__h0Ep9
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eUsaL
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wcpmq
                            )}
                          >
                            {"准确率高"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kjL7Y
                            )}
                          >
                            {"自定义对接业务系统数据源，精准监控营收情况"}
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k3Eq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__sPk1I
                          )}
                        >
                          <Icon20Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mRSnr
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sEcVo
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dkOjn
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___90TKt
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__g8Ao
                            )}
                          >
                            {"组件丰富"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mHivD
                            )}
                          >
                            {
                              "内置多种图表组件，如：折线图、柱形图、雷达图、等，同时支持自定义样式设置"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0Bp9Z
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___7Iutm
                          )}
                        >
                          <Icon12Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gnyLv
                            )}
                            role={"img"}
                          />
                        </div>

                        {false ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___07VIi
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mEpvl
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__q06A8
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rYePp
                            )}
                          >
                            {"体验好"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6BpMe
                            )}
                          >
                            {
                              "通过点击拖拽等简单交互快速实现网页、平板、移动端的界面，无需复杂培训，上手即用"
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </section>
            </Reveal>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "content",
    "navbar",
    "logo",
    "寒芒Logo",
    "logo2",
    "logoText",
    "button",
    "公司描述",
    "文字",
    "image9",
    "tag",
    "frame4",
    "业务领域",
    "image24",
    "frame28",
    "title",
    "section",
    "foreground3",
    "frame35",
    "title5",
    "title6",
    "客户案例2",
    "成果1",
    "img",
    "文字3",
    "成果",
    "title4",
    "image8",
    "经济效益2",
    "foreground2",
    "icon经济效益",
    "竞争优势",
    "foreground",
    "footer"
  ],
  content: [
    "content",
    "navbar",
    "logo",
    "寒芒Logo",
    "logo2",
    "logoText",
    "button",
    "公司描述",
    "文字",
    "image9",
    "tag",
    "frame4",
    "业务领域",
    "image24",
    "frame28",
    "title",
    "section",
    "foreground3",
    "frame35",
    "title5",
    "title6",
    "客户案例2",
    "成果1",
    "img",
    "文字3",
    "成果",
    "title4",
    "image8",
    "经济效益2",
    "foreground2",
    "icon经济效益",
    "竞争优势",
    "foreground",
    "footer"
  ],
  navbar: ["navbar", "logo", "寒芒Logo", "logo2", "logoText", "button"],
  logo: ["logo", "寒芒Logo", "logo2", "logoText"],
  寒芒Logo: ["寒芒Logo", "logo2"],
  logo2: ["logo2"],
  logoText: ["logoText"],
  button: ["button"],
  公司描述: ["公司描述", "文字", "image9", "tag", "frame4"],
  文字: ["文字", "image9", "tag"],
  image9: ["image9"],
  tag: ["tag"],
  frame4: ["frame4"],
  业务领域: ["业务领域", "image24", "frame28", "title"],
  image24: ["image24"],
  frame28: ["frame28", "title"],
  title: ["title"],
  section: ["section", "foreground3", "frame35", "title5", "title6"],
  foreground3: ["foreground3", "frame35", "title5", "title6"],
  frame35: ["frame35", "title5", "title6"],
  title5: ["title5"],
  title6: ["title6"],
  客户案例2: ["客户案例2", "成果1", "img", "文字3", "成果", "title4", "image8"],
  成果1: ["成果1", "img", "文字3", "成果", "title4", "image8"],
  img: ["img"],
  文字3: ["文字3", "成果", "title4", "image8"],
  成果: ["成果", "title4", "image8"],
  title4: ["title4"],
  image8: ["image8"],
  经济效益2: ["经济效益2", "foreground2", "icon经济效益"],
  foreground2: ["foreground2", "icon经济效益"],
  icon经济效益: ["icon经济效益"],
  竞争优势: ["竞争优势", "foreground"],
  foreground: ["foreground"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  content: "div";
  navbar: "div";
  logo: "div";
  寒芒Logo: "div";
  logo2: "div";
  logoText: "div";
  button: typeof Button;
  公司描述: "div";
  文字: "div";
  image9: "div";
  tag: "div";
  frame4: "div";
  业务领域: "div";
  image24: "div";
  frame28: "div";
  title: "div";
  section: "section";
  foreground3: "div";
  frame35: "div";
  title5: "div";
  title6: "div";
  客户案例2: "div";
  成果1: "div";
  img: typeof p.PlasmicImg;
  文字3: "div";
  成果: "div";
  title4: "div";
  image8: "div";
  经济效益2: "section";
  foreground2: "div";
  icon经济效益: typeof p.PlasmicImg;
  竞争优势: "section";
  foreground: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic创维监控__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic创维监控__VariantsArgs;
    args?: Plasmic创维监控__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic创维监控__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic创维监控__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: Plasmic创维监控__ArgProps,
          internalVariantPropNames: Plasmic创维监控__VariantProps
        }),
      [props, nodeName]
    );

    return Plasmic创维监控__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic创维监控";
  } else {
    func.displayName = `Plasmic创维监控.${nodeName}`;
  }
  return func;
}

export const Plasmic创维监控 = Object.assign(
  // Top-level Plasmic创维监控 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    navbar: makeNodeComponent("navbar"),
    logo: makeNodeComponent("logo"),
    寒芒Logo: makeNodeComponent("寒芒Logo"),
    logo2: makeNodeComponent("logo2"),
    logoText: makeNodeComponent("logoText"),
    button: makeNodeComponent("button"),
    公司描述: makeNodeComponent("公司描述"),
    文字: makeNodeComponent("文字"),
    image9: makeNodeComponent("image9"),
    tag: makeNodeComponent("tag"),
    frame4: makeNodeComponent("frame4"),
    业务领域: makeNodeComponent("业务领域"),
    image24: makeNodeComponent("image24"),
    frame28: makeNodeComponent("frame28"),
    title: makeNodeComponent("title"),
    section: makeNodeComponent("section"),
    foreground3: makeNodeComponent("foreground3"),
    frame35: makeNodeComponent("frame35"),
    title5: makeNodeComponent("title5"),
    title6: makeNodeComponent("title6"),
    客户案例2: makeNodeComponent("客户案例2"),
    成果1: makeNodeComponent("成果1"),
    img: makeNodeComponent("img"),
    文字3: makeNodeComponent("文字3"),
    成果: makeNodeComponent("成果"),
    title4: makeNodeComponent("title4"),
    image8: makeNodeComponent("image8"),
    经济效益2: makeNodeComponent("经济效益2"),
    foreground2: makeNodeComponent("foreground2"),
    icon经济效益: makeNodeComponent("icon经济效益"),
    竞争优势: makeNodeComponent("竞争优势"),
    foreground: makeNodeComponent("foreground"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for Plasmic创维监控
    internalVariantProps: Plasmic创维监控__VariantProps,
    internalArgProps: Plasmic创维监控__ArgProps
  }
);

export default Plasmic创维监控;
/* prettier-ignore-end */
